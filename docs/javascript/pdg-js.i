// this file was automatically generated by tools/main.js

START_NAMESPACE(pdg)

// globals
	CONSTANT(all_events, 0, number)
	CONSTANT(eventType_Shutdown, 2, number)
	CONSTANT(eventType_Timer, 3, number)
	CONSTANT(eventType_KeyDown, 4, number)
	CONSTANT(eventType_KeyUp, 5, number)
	CONSTANT(eventType_KeyPress, 6, number)
	CONSTANT(eventType_MouseDown, 7, number)
	CONSTANT(eventType_MouseUp, 8, number)
	CONSTANT(eventType_MouseMove, 9, number)
	CONSTANT(eventType_MouseEnter, 22, number)
	CONSTANT(eventType_MouseLeave, 23, number)
	CONSTANT(eventType_PortResized, 15, number)
	CONSTANT(eventType_ScrollWheel, 16, number)
	CONSTANT(eventType_SpriteTouch, 19, number)
	CONSTANT(eventType_SpriteAnimate, 17, number)
	CONSTANT(eventType_SpriteLayer, 18, number)
	CONSTANT(eventType_SpriteCollide, 20, number)
	CONSTANT(eventType_SpriteBreak, 21, number)
	CONSTANT(eventType_SoundEvent, 14, number)
	CONSTANT(eventType_PortDraw, 24, number)
	CONSTANT(soundEvent_DonePlaying, 0, number)
	CONSTANT(soundEvent_Looping, 1, number)
	CONSTANT(soundEvent_FailedToPlay, 2, number)
	CONSTANT(key_Break, 1, number)
	CONSTANT(key_Home, 2, number)
	CONSTANT(key_End, 3, number)
	CONSTANT(key_Clear, 4, number)
	CONSTANT(key_Help, 5, number)
	CONSTANT(key_Pause, 6, number)
	CONSTANT(key_Mute, 7, number)
	CONSTANT(key_Backspace, 8, number)
	CONSTANT(key_Delete, 127, number)
	CONSTANT(key_Tab, 9, number)
	CONSTANT(key_PageUp, 11, number)
	CONSTANT(key_PageDown, 12, number)
	CONSTANT(key_Return, 13, number)
	CONSTANT(key_Enter, 13, number)
	CONSTANT(key_F1, 14, number)
	CONSTANT(key_F2, 15, number)
	CONSTANT(key_F3, 16, number)
	CONSTANT(key_F4, 17, number)
	CONSTANT(key_F5, 18, number)
	CONSTANT(key_F6, 19, number)
	CONSTANT(key_F7, 20, number)
	CONSTANT(key_F8, 21, number)
	CONSTANT(key_F9, 22, number)
	CONSTANT(key_F10, 23, number)
	CONSTANT(key_F11, 24, number)
	CONSTANT(key_F12, 25, number)
	CONSTANT(key_FirstF, 14, number)
	CONSTANT(key_LastF, 25, number)
	CONSTANT(key_Insert, 26, number)
	CONSTANT(key_Escape, 27, number)
	CONSTANT(key_LeftArrow, 28, number)
	CONSTANT(key_RightArrow, 29, number)
	CONSTANT(key_UpArrow, 30, number)
	CONSTANT(key_DownArrow, 31, number)
	CONSTANT(key_FirstPrintable, 32, number)
	CONSTANT(screenPos_Normal, 0, number)
	CONSTANT(screenPos_Rotated180, 1, number)
	CONSTANT(screenPos_Rotated90Clockwise, 2, number)
	CONSTANT(screenPos_Rotated90CounterClockwise, 3, number)
	CONSTANT(screenPos_FaceUp, 4, number)
	CONSTANT(screenPos_FaceDown, 5, number)
	CONSTANT(textStyle_Plain, 0, number)
	CONSTANT(textStyle_Bold, 1, number)
	CONSTANT(textStyle_Italic, 2, number)
	CONSTANT(textStyle_Underline, 4, number)
	CONSTANT(textStyle_Centered, 16, number)
	CONSTANT(textStyle_LeftJustified, 0, number)
	CONSTANT(textStyle_RightJustified, 32, number)
	CONSTANT(fit_None, 0, number)
	CONSTANT(fit_Height, 1, number)
	CONSTANT(fit_Width, 2, number)
	CONSTANT(fit_Inside, 3, number)
	CONSTANT(fit_Fill, 4, number)
	CONSTANT(fit_FillKeepProportions, 5, number)
	CONSTANT(init_CreateUniqueNewFile, 0, number)
	CONSTANT(init_OverwriteExisting, 1, number)
	CONSTANT(init_AppendToExisting, 2, number)
	CONSTANT(init_StdOut, 3, number)
	CONSTANT(init_StdErr, 4, number)
	CONSTANT(duration_Constant, -1, number)
	CONSTANT(duration_Instantaneous, 0, number)
	CONSTANT(animate_StartToEnd, 0, number)
	CONSTANT(animate_EndToStart, 1, number)
	CONSTANT(animate_Unidirectional, 0, number)
	CONSTANT(animate_Bidirectional, 2, number)
	CONSTANT(animate_NoLooping, 0, number)
	CONSTANT(animate_Looping, 4, number)
	CONSTANT(start_FromFirstFrame, -1, number)
	CONSTANT(start_FromLastFrame, -2, number)
	CONSTANT(all_Frames, 0, number)
	CONSTANT(action_CollideSprite, 0, number)
	CONSTANT(action_CollideWall, 1, number)
	CONSTANT(action_Offscreen, 2, number)
	CONSTANT(action_Onscreen, 3, number)
	CONSTANT(action_ExitLayer, 4, number)
	CONSTANT(action_AnimationLoop, 8, number)
	CONSTANT(action_AnimationEnd, 9, number)
	CONSTANT(action_FadeComplete, 10, number)
	CONSTANT(action_FadeInComplete, 11, number)
	CONSTANT(action_FadeOutComplete, 12, number)
	CONSTANT(action_JointBreak, 13, number)
	CONSTANT(touch_MouseEnter, 20, number)
	CONSTANT(touch_MouseLeave, 21, number)
	CONSTANT(touch_MouseDown, 22, number)
	CONSTANT(touch_MouseUp, 23, number)
	CONSTANT(touch_MouseClick, 24, number)
	CONSTANT(collide_None, 0, number)
	CONSTANT(collide_Point, 1, number)
	CONSTANT(collide_BoundingBox, 2, number)
	CONSTANT(collide_CollisionRadius, 3, number)
	CONSTANT(collide_AlphaChannel, 4, number)
	CONSTANT(collide_Last, 4, number)
	CONSTANT(action_ErasePort, 40, number)
	CONSTANT(action_PreDrawLayer, 41, number)
	CONSTANT(action_PostDrawLayer, 42, number)
	CONSTANT(action_DrawPortComplete, 43, number)
	CONSTANT(action_AnimationStart, 44, number)
	CONSTANT(action_PreAnimateLayer, 45, number)
	CONSTANT(action_PostAnimateLayer, 46, number)
	CONSTANT(action_AnimationComplete, 47, number)
	CONSTANT(action_ZoomComplete, 48, number)
	CONSTANT(action_LayerFadeInComplete, 49, number)
	CONSTANT(action_LayerFadeOutComplete, 50, number)
	CONSTANT(facing_North, 0, number)
	CONSTANT(facing_East, 64, number)
	CONSTANT(facing_South, 128, number)
	CONSTANT(facing_West, 192, number)
	CONSTANT(facing_Ignore, 256, number)
	CONSTANT(flipped_None, 0, number)
	CONSTANT(flipped_Horizontal, 64, number)
	CONSTANT(flipped_Vertical, 128, number)
	CONSTANT(flipped_Both, 192, number)
	CONSTANT(flipped_Ignore, 256, number)
	CONSTANT(timer_OneShot, true, boolean)
	CONSTANT(timer_Repeating, false, boolean)
	CONSTANT(timer_Never, -1, number)
	CONSTANT(linearTween, 0, number)
	CONSTANT(easeInQuad, 1, number)
	CONSTANT(easeOutQuad, 2, number)
	CONSTANT(easeInOutQuad, 3, number)
	CONSTANT(easeInCubic, 4, number)
	CONSTANT(easeOutCubic, 5, number)
	CONSTANT(easeInOutCubic, 6, number)
	CONSTANT(easeInQuart, 7, number)
	CONSTANT(easeOutQuart, 8, number)
	CONSTANT(easeInQuint, 10, number)
	CONSTANT(easeOutQuint, 11, number)
	CONSTANT(easeInOutQuint, 12, number)
	CONSTANT(easeInSine, 13, number)
	CONSTANT(easeOutSine, 14, number)
	CONSTANT(easeInOutSine, 15, number)
	CONSTANT(easeInExpo, 16, number)
	CONSTANT(easeOutExpo, 17, number)
	CONSTANT(easeInOutExpo, 18, number)
	CONSTANT(easeInCirc, 19, number)
	CONSTANT(easeOutCirc, 20, number)
	CONSTANT(easeInOutCirc, 21, number)
	CONSTANT(easeInBounce, 22, number)
	CONSTANT(easeOutBounce, 23, number)
	CONSTANT(easeInOutBounce, 24, number)
	CONSTANT(easeInBack, 25, number)
	CONSTANT(easeOutBack, 26, number)
	CONSTANT(easeInOutBack, 27, number)
	CONSTANT(ser_Positions, 1, number)
	CONSTANT(ser_ZOrder, 2, number)
	CONSTANT(ser_Sizes, 4, number)
	CONSTANT(ser_Animations, 8, number)
	CONSTANT(ser_Motion, 16, number)
	CONSTANT(ser_Forces, 32, number)
	CONSTANT(ser_Physics, 64, number)
	CONSTANT(ser_LayerDraw, 128, number)
	CONSTANT(ser_ImageRefs, 256, number)
	CONSTANT(ser_SCMLRefs, 512, number)
	CONSTANT(ser_HelperRefs, 1024, number)
	CONSTANT(ser_HelperObjs, 8192, number)
	CONSTANT(ser_InitialData, 16384, number)
	CONSTANT(ser_Micro, 3, number)
	CONSTANT(ser_Update, 127, number)
	CONSTANT(ser_Full, 18303, number)
	VARIABLE(running, boolean)
	VARIABLE(quitting, boolean)
	CONSTANT(lftTop, 0, number)
	CONSTANT(rgtTop, 1, number)
	CONSTANT(rgtBot, 2, number)
	CONSTANT(lftBot, 3, number)
	VARIABLE(hasNetwork, boolean)
	VARIABLE(fs, [object FileManager])
	VARIABLE(evt, [object EventManager])
	VARIABLE(tm, [object TimerManager])
	VARIABLE(res, [object ResourceManager])
	VARIABLE(cfg, [object ConfigManager])
	VARIABLE(lm, [object LogManager])
	VARIABLE(gfx, [object GraphicsManager])
	VARIABLE(hasGraphics, boolean)
	VARIABLE(snd, [object SoundManager])
	VARIABLE(hasSound, boolean)
	VARIABLE(argv, string[])
// functions
	FUNCTION(rand, number, (), "")
	FUNCTION(srand, undefined, ([number uint] seed), "")
	FUNCTION(setSerializationDebugMode, undefined, (bool debugMode), "")
	FUNCTION(registerEasingFunction, undefined, (function easingFunc), "")
	FUNCTION(getFileManager, [object FileManager], (), "")
	FUNCTION(getLogManager, [object LogManager], (), "")
	FUNCTION(getConfigManager, [object ConfigManager], (), "")
	FUNCTION(getResourceManager, [object ResourceManager], (), "")
	FUNCTION(getEventManager, [object EventManager], (), "")
	FUNCTION(getTimerManager, [object TimerManager], (), "")
	FUNCTION(registerSerializableClass, undefined, (function klass), "")
	FUNCTION(getGraphicsManager, [object GraphicsManager], (), "")
	FUNCTION(getSoundManager, [object SoundManager], (), "")
	FUNCTION(createSpriteLayer, [object SpriteLayer], ([object Port] port = null), "")
	FUNCTION(cleanupSpriteLayer, undefined, ([object SpriteLayer] layer), "")
	FUNCTION(createTileLayer, [object TileLayer], ([object Port] port = null), "")
	FUNCTION(quit, undefined, (), "")
	FUNCTION(run, undefined, (), "")
	FUNCTION(idle, undefined, (), "")
	FUNCTION(openDebugger, undefined, (), "start node-inspector and open a debugger window in your browser")
	FUNCTION(openConsole, undefined, (), "open a pdg console window")
	FUNCTION(openCommandPort, undefined, ([number int] port = 5757), "start a REPL server on a TCP port")
	FUNCTION(log, undefined, (string msg), "")
	FUNCTION(info, undefined, (string msg), "")
	FUNCTION(warn, undefined, (string msg), "")
	FUNCTION(fatal, undefined, (string msg), "")
	FUNCTION(error, undefined, (string msg), "")
	FUNCTION(debug, undefined, (string msg), "")
	FUNCTION(trace, undefined, (string msg), "")
	FUNCTION(captureConsole, undefined, (), "")
	FUNCTION(on, [object IEventHandler], ([number int] eventType, function func), "")
	FUNCTION(onShutdown, [object IEventHandler], (function func), "")
	FUNCTION(onTimer, [object IEventHandler], (function func), "")
	FUNCTION(onKeyDown, [object IEventHandler], (function func), "")
	FUNCTION(onKeyUp, [object IEventHandler], (function func), "")
	FUNCTION(onKeyPress, [object IEventHandler], (function func), "")
	FUNCTION(onMouseDown, [object IEventHandler], (function func), "")
	FUNCTION(onMouseUp, [object IEventHandler], (function func), "")
	FUNCTION(onMouseMove, [object IEventHandler], (function func), "")
	FUNCTION(startRepl, undefined, (), "")
// interfaces

	INTERFACE(MemBlock, )
		METHOD(getData, [string Binary], (), "")
		METHOD(getDataSize, number, (), "")
		METHOD(getByte, number, ([number uint] i), "")
		METHOD(getBytes, [string Binary], ([number uint] start, [number uint] len), "")
		METHOD(toBuffer, [object Buffer], (), "")
	END

	INTERFACE(FileManager, )
		METHOD(findFirst, object, (string inFindName), "")
		METHOD(findNext, object, (object inFindData), "")
		METHOD(findClose, undefined, (object inFindData), "")
		METHOD(getApplicationDataDirectory, string, (), "")
		METHOD(getApplicationDirectory, string, (), "")
		METHOD(getApplicationResourceDirectory, string, (), "")
		METHOD(findFiles, string[], (string name), "")
		METHOD(findDirs, string[], (string name), "")
	END

	INTERFACE(LogManager, )
		CONSTANT(init_CreateUniqueNewFile, 0, number)
		CONSTANT(init_OverwriteExisting, 1, number)
		CONSTANT(init_AppendToExisting, 2, number)
		CONSTANT(init_StdOut, 3, number)
		CONSTANT(init_StdErr, 4, number)
		METHOD(getLogLevel, number, (), "")
		METHOD(setLogLevel, LogManager, ([number int] inLogLevel), "")
		METHOD(initialize, undefined, (string inLogNameBase, [number int] initMode = LogManager.init_StdOut), "")
		METHOD(writeLogEntry, undefined, ([number int] level, string category, string message), "")
		METHOD(binaryDump, string, ([string Binary] inData, [number int] length = 0, [number int] bytesPerLine = 20), "")
		METHOD(binaryDump, string, ([object MemBlock] inData, [number int] length = 0, [number int] bytesPerLine = 20), "")
	END

	INTERFACE(ConfigManager, )
		METHOD(useConfig, boolean, (string inConfigName), "")
		METHOD(getConfigString, string, (string inConfigItemName), "")
		METHOD(getConfigLong, number, (string inConfigItemName), "")
		METHOD(getConfigFloat, number, (string inConfigItemName), "")
		METHOD(getConfigBool, boolean, (string inConfigItemName), "")
		METHOD(setConfigString, undefined, (string inConfigItemName, string inValue), "")
		METHOD(setConfigLong, undefined, (string inConfigItemName, [number int] inValue), "")
		METHOD(setConfigFloat, undefined, (string inConfigItemName, number inValue), "")
		METHOD(setConfigBool, undefined, (string inConfigItemName, boolean inValue), "")
	END

	INTERFACE(ResourceManager, )
		METHOD(getLanguage, string, (), "")
		METHOD(setLanguage, ResourceManager, (string inLanguage), "")
		METHOD(openResourceFile, number, (string filename), "")
		METHOD(closeResourceFile, undefined, ([number int] refNum), "")
		METHOD(getImage, [object Image], (string imageName), "")
		METHOD(getImageStrip, [object ImageStrip], (string imageName), "")
		METHOD(getString, string, ([number int] id, [number int] substring = -1), "")
		METHOD(getResourceSize, number, (string resourceName), "")
		METHOD(getResource, [string Binary], (string resourceName), "")
		METHOD(getResourcePaths, string, (), "")
	END

	INTERFACE(Serializer, )
		METHOD(serialize_8, undefined, (number val), "")
		METHOD(serialize_8u, undefined, (number val), "")
		METHOD(serialize_d, undefined, (number val), "")
		METHOD(serialize_f, undefined, (number val), "")
		METHOD(serialize_4, undefined, ([number int] val), "")
		METHOD(serialize_4u, undefined, ([number uint] val), "")
		METHOD(serialize_3u, undefined, ([number uint] val), "")
		METHOD(serialize_2, undefined, ([number int] val), "")
		METHOD(serialize_2u, undefined, ([number uint] val), "")
		METHOD(serialize_1, undefined, ([number int] val), "")
		METHOD(serialize_1u, undefined, ([number uint] val), "")
		METHOD(serialize_bool, undefined, (boolean val), "")
		METHOD(serialize_uint, undefined, ([number uint] val), "")
		METHOD(serialize_color, undefined, ([object Color] val), "")
		METHOD(serialize_offset, undefined, ([object Offset] val), "")
		METHOD(serialize_point, undefined, ([object Point] val), "")
		METHOD(serialize_vector, undefined, ([object Vector] val), "")
		METHOD(serialize_rect, undefined, ([object Rect] val), "")
		METHOD(serialize_rotr, undefined, ([object RotatedRect] val), "")
		METHOD(serialize_quad, undefined, ([object Quad] val), "")
		METHOD(serialize_str, undefined, (string str), "")
		METHOD(serialize_mem, undefined, ([string Binary] mem), "")
		METHOD(serialize_mem, undefined, ([object MemBlock] mem), "")
		METHOD(serialize_obj, undefined, ([object ISerializable] obj), "")
		METHOD(serializedSize, number, (string arg), "")
		METHOD(serializedSize, number, (boolean arg), "")
		METHOD(serializedSize, number, ([number uint] arg), "")
		METHOD(serializedSize, number, ([object Color] arg), "")
		METHOD(serializedSize, number, ([object Offset] arg), "")
		METHOD(serializedSize, number, ([object Point] arg), "")
		METHOD(serializedSize, number, ([object Vector] arg), "")
		METHOD(serializedSize, number, ([object Rect] arg), "")
		METHOD(serializedSize, number, ([object RotatedRect] arg), "")
		METHOD(serializedSize, number, ([object Quad] arg), "")
		METHOD(serializedSize, number, ([object MemBlock] arg), "")
		METHOD(serializedSize, number, ([object ISerializable] arg), "")
		METHOD(getDataSize, number, (), "")
		METHOD(getDataPtr, [object MemBlock], (), "")
	END

	INTERFACE(Deserializer, )
		METHOD(deserialize_8, number, (), "")
		METHOD(deserialize_8u, number, (), "")
		METHOD(deserialize_d, number, (), "")
		METHOD(deserialize_f, number, (), "")
		METHOD(deserialize_4, number, (), "")
		METHOD(deserialize_4u, number, (), "")
		METHOD(deserialize_3u, number, (), "")
		METHOD(deserialize_2, number, (), "")
		METHOD(deserialize_2u, number, (), "")
		METHOD(deserialize_1, number, (), "")
		METHOD(deserialize_1u, number, (), "")
		METHOD(deserialize_bool, boolean, (), "")
		METHOD(deserialize_uint, number, (), "")
		METHOD(deserialize_color, [object Color], (), "")
		METHOD(deserialize_offset, [object Offset], (), "")
		METHOD(deserialize_point, [object Point], (), "")
		METHOD(deserialize_vector, [object Vector], (), "")
		METHOD(deserialize_rect, [object Rect], (), "")
		METHOD(deserialize_rotr, [object RotatedRect], (), "")
		METHOD(deserialize_quad, [object Quad], (), "")
		METHOD(deserialize_str, string, (), "")
		METHOD(deserialize_mem, [object MemBlock], (), "")
		METHOD(deserialize_memGetLen, number, (), "")
		METHOD(deserialize_obj, [object ISerializable], (), "")
		METHOD(setDataPtr, undefined, ([string Binary] data), "")
		METHOD(setDataPtr, undefined, ([object MemBlock] data), "")
	END

	INTERFACE(ISerializable, )
	END

	INTERFACE(IEventHandler, )
	END

	INTERFACE(EventEmitter, )
		METHOD(addHandler, undefined, ([object IEventHandler] inHandler, [number int] inEventType = all_events), "add a new handler for some event type, or for all events if no type specified.  \param inHandler the object to handle events \param inEventType the type of event to handle")
		METHOD(removeHandler, undefined, ([object IEventHandler] inHandler, [number int] inEventType = all_events), "remove a handler for some event type, or for all events (see note) if no type specified. If the handler is listed multiple times it will only remove it once. <br/><br/> NOTE: inType == all_events doesn't work quite like you might expect. If you have registered a handler for multiple events, but not with all_events, doing removeHandler(handler, all_events) will do nothing. Basically, all_events is a special event type that matches all event types when considering whether to invoke a handler or not. <br/><br/> It is safe to call remove handler from within an event handler's handleEvent() call. \param inHandler the object to handle events \param inEventType the type of event to stop handling (see note)")
		METHOD(clear, undefined, (), "remove all handlers")
		METHOD(blockEvent, undefined, ([number int] inEventType), "temporarily ignore all events of a particular type. Events that are blocked are NOT cached for later, they are just dropped. \param inEventType the type of event to block")
		METHOD(unblockEvent, undefined, ([number int] inEventType), "stop ignoring events of a particular type  \param inEventType the type of event to unblock")
	END

	INTERFACE(EventManager, EXTENDS(INTERFACE_NAME(EventEmitter)) )
		METHOD(isKeyDown, boolean, (string unicodeChar), "")
		METHOD(isKeyDown, boolean, ([number uint] utf16CharCode), "")
		METHOD(isRawKeyDown, boolean, ([number int] keyCode), "")
		METHOD(isButtonDown, boolean, ([number int] buttonNumber = 0), "")
		METHOD(getDeviceOrientation, object, (boolean absolute = false), "NOT IMPLEMENTED")
	END

	INTERFACE(TimerManager, EXTENDS(INTERFACE_NAME(EventEmitter)) )
		METHOD(startTimer, undefined, ([number int] id, [number uint] delay, boolean oneShot = true), "")
		METHOD(cancelTimer, undefined, ([number int] id), "")
		METHOD(cancelAllTimers, undefined, (), "")
		METHOD(delayTimer, undefined, ([number int] id, [number uint] delay), "")
		METHOD(delayTimerUntil, undefined, ([number int] id, [number uint] msTime), "")
		METHOD(pause, undefined, (), "")
		METHOD(unpause, undefined, (), "")
		METHOD(isPaused, boolean, (), "")
		METHOD(pauseTimer, undefined, ([number int] id), "")
		METHOD(unpauseTimer, undefined, ([number int] id), "")
		METHOD(isTimerPaused, boolean, ([number int] id), "")
		METHOD(getWhenTimerFiresNext, number, ([number int] id), "")
		METHOD(getMilliseconds, number, (), "")
		METHOD(onTimeout, [object IEventHandler], (function func, [number int] delay), "setup handler to be called once after delay ms")
		METHOD(onInterval, [object IEventHandler], (function func, [number int] interval), "setup handler to be called regularly at interval ms")
	END

	INTERFACE(IAnimationHelper, )
	END

	INTERFACE(Animated, )
		METHOD(getBoundingBox, [object Rect], (), "")
		METHOD(getRotatedBounds, [object Rect], (), "")
		METHOD(getLocation, [object Point], (), "")
		METHOD(setLocation, Animated, ([object Point] inLocation), "")
		METHOD(getSpeed, number, (), "")
		METHOD(setSpeed, Animated, (number inSpeed), "")
		METHOD(getVelocity, [object Vector], (), "")
		METHOD(setVelocity, [object Animated], ([object Vector] deltaPerSec), "")
		METHOD(setVelocity, [object Animated], (number deltaXPerSec, number deltaYPerSec), "")
		METHOD(getWidth, number, (), "")
		METHOD(setWidth, Animated, (number inWidth), "")
		METHOD(getHeight, number, (), "")
		METHOD(setHeight, Animated, (number inHeight), "")
		METHOD(getRotation, number, (), "")
		METHOD(setRotation, Animated, (number inRotation), "")
		METHOD(getCenterOffset, [object Offset], (), "")
		METHOD(setCenterOffset, Animated, ([object Offset] inCenterOffset), "")
		METHOD(getSpin, number, (), "")
		METHOD(setSpin, Animated, (number inSpin), "")
		METHOD(getMass, number, (), "")
		METHOD(setMass, Animated, (number inMass), "")
		METHOD(getMoveFriction, number, (), "")
		METHOD(setMoveFriction, Animated, (number inMoveFriction), "")
		METHOD(getSpinFriction, number, (), "")
		METHOD(setSpinFriction, Animated, (number inSpinFriction), "")
		METHOD(getSizeFriction, number, (), "")
		METHOD(setSizeFriction, Animated, (number inSizeFriction), "")
		METHOD(move, undefined, ([object Offset] delta, [number int] msDuration = duration_Instantaneous, [number int] easing = easeInOutQuad), "")
		METHOD(moveTo, undefined, ([object Point] where, [number int] msDuration = duration_Instantaneous, [number int] easing = easeInOutQuad), "")
		METHOD(setVelocityInRadians, [object Animated], (number speed, number direction), "")
		METHOD(getMovementDirectionInRadians, number, (), "")
		METHOD(stopMoving, undefined, (), "")
		METHOD(accelerate, undefined, (number deltaSpeed, [number int] msDuration = duration_Instantaneous, [number int] easing = linearTween), "")
		METHOD(accelerateTo, undefined, (number speed, [number int] msDuration = duration_Instantaneous, [number int] easing = linearTween), "")
		METHOD(setSize, [object Animated], (number width, number height), "")
		METHOD(grow, undefined, (number factor, [number int] msDuration = duration_Instantaneous, [number int] easing = easeInOutQuad), "")
		METHOD(stretch, undefined, (number widthFactor, number heightFactor, [number int] msDuration = duration_Instantaneous, [number int] easing = easeInOutQuad), "")
		METHOD(startGrowing, undefined, (number amountPerSecond), "")
		METHOD(stopGrowing, undefined, (), "")
		METHOD(startStretching, undefined, (number widthPerSecond, number heightPerSecond), "")
		METHOD(stopStretching, undefined, (), "")
		METHOD(resize, undefined, (number deltaWidth, number deltaHeight, [number int] msDuration = duration_Instantaneous, [number int] easing = easeInOutQuad), "")
		METHOD(resizeTo, undefined, (number width, number height, [number int] msDuration = duration_Instantaneous, [number int] easing = easeInOutQuad), "")
		METHOD(rotate, undefined, (number radians, [number int] msDuration = duration_Instantaneous, [number int] easing = easeInOutQuad), "")
		METHOD(rotateTo, undefined, (number radiansRotation, [number int] msDuration = duration_Instantaneous, [number int] easing = easeInOutQuad), "")
		METHOD(stopSpinning, undefined, (), "")
		METHOD(changeCenter, undefined, ([object Offset] offset, [number int] msDuration = duration_Instantaneous, [number int] easing = easeInOutQuad), "")
		METHOD(changeCenterTo, undefined, ([object Offset] offset, [number int] msDuration = duration_Instantaneous, [number int] easing = easeInOutQuad), "")
		METHOD(wait, [object Animated], ([number int] msDuration), "")
		METHOD(setFriction, [object Animated], (number frictionCoefficient), "")
		METHOD(applyForce, undefined, ([object Vector] force, [number int] msDuration = duration_Instantaneous), "")
		METHOD(applyTorque, undefined, (number forceSpin, [number int] msDuration = duration_Instantaneous), "")
		METHOD(stopAllForces, undefined, (), "")
		METHOD(addAnimationHelper, undefined, ([object IAnimationHelper] helper), "")
		METHOD(removeAnimationHelper, undefined, ([object IAnimationHelper] helper), "")
		METHOD(clearAnimationHelpers, undefined, (), "")
		METHOD(animate, boolean, ([number int] msElapsed), "")
	END

	INTERFACE(CpArbiter, )
		METHOD(isFirstContact, boolean, (), "true if this is the first moment of contact between the objects, false if part of an ongoing collison")
		METHOD(getCount, number, (), "")
		METHOD(getNormal, [object Vector], ([number int] i), "")
		METHOD(getPoint, [object Point], ([number int] i), "")
		METHOD(getDepth, number, ([number int] i), "")
	END

	INTERFACE(CpConstraint, )
		METHOD(getType, string, (), "")
		METHOD(activateBodies, undefined, (), "")
		METHOD(getImpulse, number, (), "")
		METHOD(getMaxForce, number, (), "")
		METHOD(setMaxForce, cpConstraint, (number inMaxForce), "")
		METHOD(getErrorBias, number, (), "")
		METHOD(setErrorBias, cpConstraint, (number inErrorBias), "")
		METHOD(getMaxBias, number, (), "")
		METHOD(setMaxBias, cpConstraint, (number inMaxBias), "")
		METHOD(getSprite, [object Sprite], (), "")
		METHOD(getOtherSprite, [object Sprite], (), "")
		METHOD(getAnchor, [object Offset], (), "")
		METHOD(setAnchor, cpConstraint, ([object Offset] inAnchor), "")
		METHOD(getOtherAnchor, [object Offset], (), "")
		METHOD(setOtherAnchor, cpConstraint, ([object Offset] inOtherAnchor), "")
		METHOD(getPinDist, number, (), "")
		METHOD(setPinDist, cpConstraint, (number inPinDist), "")
		METHOD(getSpringStiffness, number, (), "")
		METHOD(setSpringStiffness, cpConstraint, (number inSpringStiffness), "")
		METHOD(getSpringDamping, number, (), "")
		METHOD(setSpringDamping, cpConstraint, (number inSpringDamping), "")
		METHOD(getSlideMinDist, number, (), "")
		METHOD(setSlideMinDist, cpConstraint, (number inSlideMinDist), "")
		METHOD(getSlideMaxDist, number, (), "")
		METHOD(setSlideMaxDist, cpConstraint, (number inSlideMaxDist), "")
		METHOD(getGrooveStart, [object Offset], (), "")
		METHOD(setGrooveStart, cpConstraint, ([object Offset] inGrooveStart), "")
		METHOD(getGrooveEnd, [object Offset], (), "")
		METHOD(setGrooveEnd, cpConstraint, ([object Offset] inGrooveEnd), "")
		METHOD(getSpringRestLength, number, (), "")
		METHOD(setSpringRestLength, cpConstraint, (number inSpringRestLength), "")
		METHOD(getRotarySpringRestAngle, number, (), "")
		METHOD(setRotarySpringRestAngle, cpConstraint, (number inRotarySpringRestAngle), "")
		METHOD(getMinAngle, number, (), "")
		METHOD(setMinAngle, cpConstraint, (number inMinAngle), "")
		METHOD(getMaxAngle, number, (), "")
		METHOD(setMaxAngle, cpConstraint, (number inMaxAngle), "")
		METHOD(getRatchetAngle, number, (), "")
		METHOD(setRatchetAngle, cpConstraint, (number inRatchetAngle), "")
		METHOD(getRatchetPhase, number, (), "")
		METHOD(setRatchetPhase, cpConstraint, (number inRatchetPhase), "")
		METHOD(getRatchetInterval, number, (), "")
		METHOD(setRatchetInterval, cpConstraint, (number inRatchetInterval), "")
		METHOD(getGearRatio, number, (), "")
		METHOD(setGearRatio, cpConstraint, (number inGearRatio), "")
		METHOD(getGearInitialAngle, number, (), "")
		METHOD(setGearInitialAngle, cpConstraint, (number inGearInitialAngle), "")
		METHOD(getMotorSpinRate, number, (), "")
		METHOD(setMotorSpinRate, cpConstraint, (number inMotorSpinRate), "")
	END

	INTERFACE(CpSpace, )
		METHOD(useSpatialHash, undefined, (number dim, [number int] count), "")
		METHOD(reindexStatic, undefined, (), "")
		METHOD(step, undefined, (number dt), "")
		METHOD(getIdleSpeedThreshold, number, (), "")
		METHOD(setIdleSpeedThreshold, cpSpace, (number inIdleSpeedThreshold), "")
		METHOD(getSleepTimeThreshold, number, (), "")
		METHOD(setSleepTimeThreshold, cpSpace, (number inSleepTimeThreshold), "")
		METHOD(getCollisionSlop, number, (), "")
		METHOD(setCollisionSlop, cpSpace, (number inCollisionSlop), "")
		METHOD(getCollisionBias, number, (), "")
		METHOD(setCollisionBias, cpSpace, (number inCollisionBias), "")
		METHOD(getCollisionPersistence, number, (), "")
		METHOD(setCollisionPersistence, cpSpace, (number inCollisionPersistence), "")
		METHOD(getEnableContactGraph, boolean, (), "")
		METHOD(setEnableContactGraph, cpSpace, (boolean inEnableContactGraph), "")
	END

	INTERFACE(ISpriteDrawHelper, )
	END

	INTERFACE(ISpriteCollideHelper, )
	END

	INTERFACE(Sprite, EXTENDS(INTERFACE_NAME(Animated) AND INTERFACE_NAME(EventEmitter) AND INTERFACE_NAME(ISerializable)) )
		METHOD(getMyClassTag, number, (), "")
		METHOD(getSerializedSize, CR [number uint], ([object Serializer] serializer), "get size of this object's data for the given stream")
		METHOD(serialize, CR undefined, ([object Serializer] serializer), "write this object's data into the given stream")
		METHOD(deserialize, CR undefined, ([object Deserializer] deserializer), "read this object's data from the given stream")
		METHOD(getFrameRotatedBounds, [object Rect], ([number int] frame), "")
		METHOD(setFrame, [object Sprite], ([number int] frame), "")
		METHOD(getCurrentFrame, number, (), "which frame of animation the sprite is currently showing")
		METHOD(getFrameCount, number, (), "total number of frames of animation for this sprite")
		METHOD(startFrameAnimation, undefined, (number fps, [number int] startingFrame = start_FromFirstFrame, [number int] numFrames = all_Frames, [number int] animateFlags = animate_Looping), "")
		METHOD(stopFrameAnimation, undefined, (), "")
		METHOD(setWantsAnimLoopEvents, boolean, (boolean wantsThem = true), "")
		METHOD(setWantsAnimEndEvents, boolean, (boolean wantsThem = true), "")
		METHOD(setWantsCollideWallEvents, [object Sprite], (boolean wantsThem = true), "")
		METHOD(addFramesImage, undefined, ([object Image] image, [number int] startingFrame = start_FromFirstFrame, [number int] numFrames = all_Frames), "")
		METHOD(hasAnimation, boolean, ( [number int] animationId ), "")
		METHOD(hasAnimation, boolean, ( string animationName ), "")
		METHOD(startAnimation, undefined, ( [number int] animationId ), "")
		METHOD(startAnimation, undefined, ( string animationName ), "")
		METHOD(setEntityScale, [object Sprite], (number xScale, number yScale), "")
		METHOD(changeFramesImage, undefined, ([object Image] oldImage, [object Image] newImage), "")
		METHOD(offsetFrameCenters, undefined, ([number int] offsetX, [number int] offsetY, [object Image] image = null, [number int] startingFrame = start_FromFirstFrame, [number int] numFrames = all_Frames), "")
		METHOD(getFrameCenterOffset, Offset, ([object Image] image = null, [number int] frameNum = 0), "")
		METHOD(setOpacity, [object Sprite], (number opacity), "")
		METHOD(getOpacity, number, (), "")
		METHOD(fadeTo, undefined, (number targetOpacity, [number int] msDuration, [number int] easing = linearTween), "")
		METHOD(fadeIn, undefined, ([number int] msDuration, [number int] easing = linearTween), "")
		METHOD(fadeOut, undefined, ([number int] msDuration, [number int] easing = linearTween), "")
		METHOD(isBehind, boolean, ([object Sprite] sprite), "")
		METHOD(getZOrder, [number int], (), "")
		METHOD(moveBehind, [object Sprite], ([object Sprite] sprite), "")
		METHOD(moveInFrontOf, [object Sprite], ([object Sprite] sprite), "")
		METHOD(moveToFront, [object Sprite], (), "put this sprite in front of all others in its layer")
		METHOD(moveToBack, [object Sprite], (), "put this sprite behind all others in its layer")
		METHOD(enableCollisions, [object Sprite], ([number int] collisionType = collide_AlphaChannel), "")
		METHOD(disableCollisions, [object Sprite], (), "")
		METHOD(setCollisionRadius, [object Sprite], (number pixelRadius), "")
		METHOD(getCollisionRadius, number, (), "")
		METHOD(useCollisionMask, undefined, ([object Image] frameImage, [object Image] maskImage), "")
		METHOD(setCollisionHelper, undefined, ([object ISpriteCollideHelper] helper), "")
		METHOD(setElasticity, [object Sprite], (number elasticity), "")
		METHOD(getElasticity, number, (), "")
		METHOD(getLayer, [object SpriteLayer], (), "get the layer that contains this sprite")
		METHOD(setDrawHelper, undefined, ([object ISpriteDrawHelper] helper), "")
		METHOD(setPostDrawHelper, undefined, ([object ISpriteDrawHelper] helper), "")
		METHOD(setWantsMouseOverEvents, boolean, (boolean wantsThem = true), "")
		METHOD(setWantsClickEvents, boolean, (boolean wantsThem = true), "")
		METHOD(setMouseDetectMode, number, ([number int] collisionType = collide_BoundingBox), "")
		METHOD(setWantsOffscreenEvents, [object Sprite], (boolean wantsThem = true), "")
		METHOD(makeStatic, [object Sprite], (), "")
		METHOD(getFriction, number, (), "")
		METHOD(setCollideGroup, [object Sprite], ([number int] group), "")
		METHOD(getCollideGroup, number, (), "")
		METHOD(pinJoint, [object CpConstraint], ([object Offset] anchor, [object Sprite] otherSprite, [object Offset] otherAnchor, number breakingForce = 0), "")
		METHOD(slideJoint, [object CpConstraint], ([object Offset] anchor, [object Sprite] otherSprite, [object Offset] otherAnchor, number minDist, number maxDist, number breakingForce = 0), "")
		METHOD(pivotJoint, [object CpConstraint], ([object Sprite] otherSprite, [object Point] pivot, number breakingForce = 0), "")
		METHOD(grooveJoint, [object CpConstraint], ([object Offset] grooveStart, [object Offset] grooveEnd, [object Sprite] otherSprite, [object Offset] otherAnchor, number breakingForce = 0), "")
		METHOD(springJoint, [object CpConstraint], ([object Offset] anchor, [object Sprite] otherSprite, [object Offset] otherAnchor, number restLength, number stiffness, number damping, number breakingForce = 0), "")
		METHOD(rotarySpring, [object CpConstraint], ([object Sprite] otherSprite, number restAngle, number stiffness, number damping, number breakingForce = 0), "")
		METHOD(rotaryLimit, [object CpConstraint], ([object Sprite] otherSprite, number minAngle, number maxAngle, number breakingForce = 0), "")
		METHOD(ratchet, [object CpConstraint], ([object Sprite] otherSprite, number rachetInterval, number phase, number breakingForce = 0), "")
		METHOD(gear, [object CpConstraint], ([object Sprite] otherSprite, number gearRatio, number initialAngle = 0, number breakingForce = 0), "")
		METHOD(motor, [object CpConstraint], ([object Sprite] otherSprite, number spin, number maxTorque = INFINITY), "")
		METHOD(removeJoint, undefined, ([object CpConstraint] joint), "")
		METHOD(disconnect, undefined, ([object Sprite] otherSprite), "")
		METHOD(makeJointBreakable, undefined, ([object CpConstraint] joint, number breakingForce), "")
		METHOD(makeJointUnbreakable, undefined, ([object CpConstraint] joint), "")
		METHOD(on, [object IEventHandler], ([number int] eventCode, function func), "")
		METHOD(onCollideSprite, [object IEventHandler], (function func), "")
		METHOD(onCollideWall, [object IEventHandler], (function func), "")
		METHOD(onOffscreen, [object IEventHandler], (function func), "")
		METHOD(onOnscreen, [object IEventHandler], (function func), "")
		METHOD(onExitLayer, [object IEventHandler], (function func), "")
		METHOD(onAnimationLoop, [object IEventHandler], (function func), "")
		METHOD(onAnimationEnd, [object IEventHandler], (function func), "")
		METHOD(onFadeComplete, [object IEventHandler], (function func), "")
		METHOD(onFadeInComplete, [object IEventHandler], (function func), "")
		METHOD(onFadeOutComplete, [object IEventHandler], (function func), "")
		METHOD(onMouseEnter, [object IEventHandler], (function func), "")
		METHOD(onMouseLeave, [object IEventHandler], (function func), "")
		METHOD(onMouseDown, [object IEventHandler], (function func), "")
		METHOD(onMouseUp, [object IEventHandler], (function func), "")
		METHOD(onMouseClick, [object IEventHandler], (function func), "")
	END

	INTERFACE(SpriteLayer, EXTENDS(INTERFACE_NAME(Animated) AND INTERFACE_NAME(EventEmitter) AND INTERFACE_NAME(ISerializable)) )
		METHOD(getMyClassTag, number, (), "")
		METHOD(getSerializedSize, CR [number uint], ([object Serializer] serializer), "get size of this object's data for the given stream")
		METHOD(serialize, CR undefined, ([object Serializer] serializer), "write this object's data into the given stream")
		METHOD(deserialize, CR undefined, ([object Deserializer] deserializer), "read this object's data from the given stream")
		METHOD(setSerializationFlags, [object SpriteLayer], ([number uint] flags), "")
		METHOD(startAnimations, undefined, (), "")
		METHOD(stopAnimations, undefined, (), "")
		METHOD(hide, undefined, (), "")
		METHOD(show, undefined, (), "")
		METHOD(isHidden, boolean, (), "")
		METHOD(fadeIn, undefined, ([number int] msDuration, [number int] easing = linearTween), "")
		METHOD(fadeOut, undefined, ([number int] msDuration, [number int] easing = linearTween), "")
		METHOD(moveBehind, undefined, ([object SpriteLayer] layer), "")
		METHOD(moveInFrontOf, undefined, ([object SpriteLayer] layer), "")
		METHOD(moveToFront, undefined, (), "move this layer in front of all other layers")
		METHOD(moveToBack, undefined, (), "move this layer behind all other layers")
		METHOD(getZOrder, [number int], (), "")
		METHOD(moveWith, , ([object SpriteLayer] layer, number moveRatio = 1.0, number zoomRatio = 1.0 ), "")
		METHOD(findSprite, [object Sprite], ([number int] id), "")
		METHOD(getNthSprite, [object Sprite], ([number int] index), "")
		METHOD(getSpriteZOrder, [number int], ([object Sprite] sprite), "")
		METHOD(isSpriteBehind, boolean, ([object Sprite] sprite, [object Sprite] otherSprite), "")
		METHOD(hasSprite, boolean, ([object Sprite] sprite), "")
		METHOD(addSprite, undefined, ([object Sprite] newSprite), "")
		METHOD(removeSprite, undefined, ([object Sprite] oldSprite), "")
		METHOD(removeAllSprites, undefined, (), "")
		METHOD(enableCollisions, undefined, (), "")
		METHOD(disableCollisions, undefined, (), "")
		METHOD(enableCollisionsWithLayer, undefined, ([object SpriteLayer] otherLayer), "")
		METHOD(disableCollisionsWithLayer, undefined, ([object SpriteLayer] otherLayer), "")
		METHOD(createSprite, [object Sprite], (), "")
		METHOD(getSpritePort, [object Port], (), "")
		METHOD(setSpritePort, undefined, ([object Port] port), "")
		METHOD(setOrigin, undefined, ([object Point] origin), "")
		METHOD(getOrigin, [object Point], (), "get the point in the layer that is drawn at 0,0 in the port")
		METHOD(setAutoCenter, undefined, (boolean autoCenter = true), "")
		METHOD(setFixedMoveAxis, undefined, (boolean fixedAxis = true), "")
		METHOD(setZoom, undefined, (number zoomLevel), "")
		METHOD(getZoom, number, (), "get the current zoom factor")
		METHOD(zoomTo, undefined, (number zoomLevel, [number int] msDuration, [number int] easing = easeInOutQuad, [object Rect] keepInRect = Rect(0,0), [object Point] centerOn = Point(0,0) ), "")
		METHOD(zoom, undefined, (number deltaZoomLevel, [number int] msDuration, [number int] easing = easeInOutQuad, [object Rect] keepInRect = Rect(0,0), [object Point] centerOn = Point(0,0) ), "")
		METHOD(layerToPortPoint, [object Point], ([object Point] p), "")
		METHOD(layerToPortOffset, [object Offset], ([object Offset] o), "")
		METHOD(layerToPortVector, [object Vector], ([object Vector] v), "")
		METHOD(layerToPortRect, [object Rect], ([object Rect] r), "")
		METHOD(layerToPortQuad, [object Quad], ([object Quad] q), "")
		METHOD(portToLayerPoint, [object Point], ([object Point] p), "")
		METHOD(portToLayerOffset, [object Offset], ([object Offset] o), "")
		METHOD(portToLayerVector, [object Vector], ([object Vector] v), "")
		METHOD(portToLayerRect, [object Rect], ([object Rect] r), "")
		METHOD(portToLayerQuad, [object Quad], ([object Quad] q), "")
		METHOD(setGravity, undefined, (number gravity, boolean keepItDownward = true), "")
		METHOD(setUseChipmunkPhysics, undefined, (boolean useIt = true), "")
		METHOD(setStaticLayer, undefined, (boolean isStatic = true), "")
		METHOD(setKeepGravityDownward, undefined, (boolean keepItDownward = true), "")
		METHOD(setDamping, undefined, (number damping), "")
		METHOD(getSpace, [object CpSpace], (), "")
		METHOD(createSpriteFromSCML, [object Sprite], (string inSCML, string inEntityName = null), "")
		METHOD(createSpriteFromSCMLFile, [object Sprite], (string inFileName, string inEntityName = null), "")
		METHOD(createSpriteFromSCMLEntity, [object Sprite], (string inEntityName), "")
		METHOD(on, [object IEventHandler], ([number int] eventCode, function func), "")
		METHOD(onCollideSprite, [object IEventHandler], (function func), "")
		METHOD(onCollideWall, [object IEventHandler], (function func), "")
		METHOD(onOffscreen, [object IEventHandler], (function func), "")
		METHOD(onOnscreen, [object IEventHandler], (function func), "")
		METHOD(onExitLayer, [object IEventHandler], (function func), "")
		METHOD(onAnimationLoop, [object IEventHandler], (function func), "")
		METHOD(onAnimationEnd, [object IEventHandler], (function func), "")
		METHOD(onFadeComplete, [object IEventHandler], (function func), "")
		METHOD(onFadeInComplete, [object IEventHandler], (function func), "")
		METHOD(onFadeOutComplete, [object IEventHandler], (function func), "")
		METHOD(onMouseEnter, [object IEventHandler], (function func), "")
		METHOD(onMouseLeave, [object IEventHandler], (function func), "")
		METHOD(onMouseDown, [object IEventHandler], (function func), "")
		METHOD(onMouseUp, [object IEventHandler], (function func), "")
		METHOD(onMouseClick, [object IEventHandler], (function func), "")
		METHOD(onErasePort, [object IEventHandler], (function func), "")
		METHOD(onPreDrawLayer, [object IEventHandler], (function func), "")
		METHOD(onPostDrawLayer, [object IEventHandler], (function func), "")
		METHOD(onDrawPortComplete, [object IEventHandler], (function func), "")
		METHOD(onAnimationStart, [object IEventHandler], (function func), "")
		METHOD(onPreAnimateLayer, [object IEventHandler], (function func), "")
		METHOD(onPostAnimateLayer, [object IEventHandler], (function func), "")
		METHOD(onAnimationComplete, [object IEventHandler], (function func), "")
		METHOD(onZoomComplete, [object IEventHandler], (function func), "")
		METHOD(onLayerFadeInComplete, [object IEventHandler], (function func), "")
		METHOD(onLayerFadeOutComplete, [object IEventHandler], (function func), "")
	END

	INTERFACE(TileLayer, EXTENDS(INTERFACE_NAME(SpriteLayer)) )
		METHOD(setWorldSize, undefined, ([number int] width, [number int] height, boolean repeatingX = false, boolean repeatingY = false), "")
		METHOD(getWorldSize, [object Rect], (), "")
		METHOD(getWorldBounds, [object Rect], (), "")
		METHOD(defineTileSet, undefined, ([number int] tileWidth, [number int] tileHeight, [object Image] tiles, boolean hasTransparency = true, boolean flipTiles = false), "")
		METHOD(loadMapData, undefined, ([string Binary] data, [number int] mapWidth = 0, [number int] mapHeight = 0, [number int] dstX, [number int] dstY), "")
		METHOD(loadMapData, undefined, ([object MemBlock] data, [number int] mapWidth = 0, [number int] mapHeight = 0, [number int] dstX, [number int] dstY), "")
		METHOD(getMapData, [object MemBlock], ([number int] mapWidth = 0, [number int] mapHeight = 0, [number int] srcX, [number int] srcY), "")
		METHOD(getTileSetImage, [object Image], (), "")
		METHOD(getTileSize, [object Point], (), "")
		METHOD(getTileTypeAt, number, ([number int] x, [number int] y), "")
		METHOD(getTileTypeAndFacingAt, object, ([number int] x, [number int] y), "")
		METHOD(setTileTypeAt, undefined, ([number int] x, [number int] y, [number uint] t, [number uint] facing = facing_Ignore), "")
		METHOD(checkCollision, number, ([object Sprite] movingSprite, [number uint] alphaThreshold = 128, boolean shortCircuit = true), "")
	END

	INTERFACE(Image, )
		METHOD(getWidth, number, (), "")
		METHOD(getHeight, number, (), "")
		METHOD(getImageBounds, CR [object Rect], ([object Point] at), "get image boundary rect, optionally with top left at given point")
		METHOD(getSubsection, CR [object Image], ([object Quad] quad), "get image that is an arbitrary subsection of this image")
		METHOD(getSubsection, CR [object Image], ([object Rect] quad), "get image that is an arbitrary subsection of this image")
		METHOD(setTransparentColor, Image, (object inTransparentColor), "")
		METHOD(getOpacity, CR number, (), "get opacity of this image: 0.0 - completely transparent to 1.0 - completely solid")
		METHOD(setOpacity, CR undefined, (number opacity), "set opacity of this image as range from either (0-255) or (0.0 to 1.0)")
		METHOD(setEdgeClamping, CR undefined, (boolean inUseEdgeClamp), "set whether image uses edge clamping or not")
		METHOD(getTransparentColor, object, (), "")
		METHOD(retainData, CR undefined, (), "retain pixel data for use by Image.getPixel()")
		METHOD(retainAlpha, CR undefined, (), "retain alpha data for use by Image.getAlphaValue() or per-pixel sprite collisions")
		METHOD(prepareToRasterize, CR number, (), "bind the image into an OpenGL texture and free image data from main memory")
		METHOD(getAlphaValue, number, ([object Point] p), "")
		METHOD(getAlphaValue, number, ([number int] x, [number int] y), "")
		METHOD(getPixel, [object Color], ([object Point] p), "")
		METHOD(getPixel, [object Color], ([number int] x, [number int] y), "")
	END

	INTERFACE(ImageStrip, EXTENDS(INTERFACE_NAME(Image)) )
		METHOD(getFrame, [object Image], ([number int] frameNum), "get image that is a single frame of this multi-frame image")
		METHOD(getFrameWidth, number, (), "")
		METHOD(setFrameWidth, ImageStrip, ([number int] inFrameWidth), "")
		METHOD(getNumFrames, number, (), "")
		METHOD(setNumFrames, ImageStrip, ([number int] inNumFrames), "")
	END

	INTERFACE(Font, )
		METHOD(getFontName, string, (), "")
		METHOD(getFontHeight, number, (number size, [number int] style = textStyle_Plain), "")
		METHOD(getFontLeading, number, (number size, [number int] style = textStyle_Plain), "")
		METHOD(getFontAscent, number, (number size, [number int] style = textStyle_Plain), "")
		METHOD(getFontDescent, number, (number size, [number int] style = textStyle_Plain), "")
	END

	INTERFACE(Port, )
		METHOD(getClipRect, [object Rect], (), "")
		METHOD(setClipRect, Port, ([object Rect] inClipRect), "")
		METHOD(getCursor, [object Image], (), "NOT IMPLEMENTED: get the Image that is being used as the cursor")
		METHOD(setCursor, undefined, ([object Image] cursorImage, [object Point] hotSpot), "NOT IMPLEMENTED")
		METHOD(getDrawingArea, [object Rect], (), "")
		METHOD(fillRect, undefined, ([object Quad] quad, [object Color] rgba = "black"), "")
		METHOD(fillRect, undefined, ([object Rect] quad, [object Color] rgba = "black"), "")
		METHOD(frameRect, undefined, ([object Quad] quad, [object Color] rgba = "black"), "")
		METHOD(frameRect, undefined, ([object Rect] quad, [object Color] rgba = "black"), "")
		METHOD(drawLine, undefined, ([object Point] from, [object Point] to, [object Color] rgba = "black"), "")
		METHOD(frameOval, undefined, ([object Point] centerPt, number xRadius, number yRadius, [object Color] rgba = "black"), "")
		METHOD(fillOval, undefined, ([object Point] centerPt, number xRadius, number yRadius, [object Color] rgba = "black"), "")
		METHOD(frameCircle, undefined, ([object Point] centerPt, number radius, [object Color] rgba = "black"), "")
		METHOD(fillCircle, undefined, ([object Point] centerPt, number radius, [object Color] rgba = "black"), "")
		METHOD(frameRoundRect, undefined, ([object Rect] rect, number radius, [object Color] rgba = "black"), "")
		METHOD(fillRoundRect, undefined, ([object Rect] rect, number radius, [object Color] rgba = "black"), "")
		METHOD(fillRectEx, undefined, ([object Quad] quad, [number uint] pattern, [number uint] patternShift, [object Color] rgba), "")
		METHOD(fillRectEx, undefined, ([object Rect] quad, [number uint] pattern, [number uint] patternShift, [object Color] rgba), "")
		METHOD(frameRectEx, undefined, ([object Quad] quad, [number uint] thickness, [number uint] pattern, [number uint] patternShift, [object Color] rgba), "")
		METHOD(frameRectEx, undefined, ([object Rect] quad, [number uint] thickness, [number uint] pattern, [number uint] patternShift, [object Color] rgba), "")
		METHOD(drawLineEx, undefined, ([object Point] from, [object Point] to, [number uint] thickness, [number uint] pattern, [number uint] patternShift, [object Color] rgba), "")
		METHOD(fillRectWithGradient, undefined, ([object Quad] quad, [object Color] startColor, [object Color] endColor), "")
		METHOD(fillRectWithGradient, undefined, ([object Rect] quad, [object Color] startColor, [object Color] endColor), "")
		METHOD(drawText, undefined, (string text, [object Point] location, [number int] size, [number uint] style = textStyle_Plain, [object Color] rgba = 'black'), "")
		METHOD(drawText, undefined, (string text, [object Quad] quad, [number int] size, [number uint] style = textStyle_Plain, [object Color] rgba = 'black'), "")
		METHOD(drawText, undefined, (string text, [object Rect] rect, [number int] size, [number uint] style = textStyle_Plain, [object Color] rgba = 'black'), "")
		METHOD(drawImage, undefined, ([object Image] img, [object Point] loc), "")
		METHOD(drawImage, undefined, ([object Image] img, [object Quad] quad), "")
		METHOD(drawImage, undefined, ([object Image] img, [object Rect] rect, [number int] fitType = fit_Fill, boolean clipOverflow = false), "")
		METHOD(drawTexture, undefined, ([object Image] img, [object Rect] r), "")
		METHOD(drawTexturedSphere, undefined, ([object Image] img, [object Point] loc, number radius, number rotation = 0, [object Offset] polarOffsetRadians = Offset(0,0), [object Offset] lightOffsetRadians = Offset(0,0)), "")
		METHOD(drawTexturedSphere, undefined, ([object ImageStrip] imgStrip, [number int] frameNum, [object Point] loc, number radius, number rotation = 0, [object Offset] polarOffsetRadians = Offset(0,0), [object Offset] lightOffsetRadians = Offset(0,0)), "")
		METHOD(getTextWidth, number, (string text, [number int] size, [number uint] style = textStyle_Plain, [number int] len = -1), "")
		METHOD(getCurrentFont, [object Font], ([number uint] style = textStyle_Plain), "")
		METHOD(setFont, undefined, ([object Font] font = DEFAULT_FONT), "")
		METHOD(setFontForStyle, undefined, ([number uint] style, [object Font] font = DEFAULT_FONT), "")
		METHOD(setFontScalingFactor, undefined, (number scaleBy), "")
		METHOD(startTrackingMouse, number, ([object Rect] rect), "NOT IMPLEMENTED")
		METHOD(stopTrackingMouse, undefined, ([number int] trackingRef), "NOT IMPLEMENTED")
		METHOD(resetCursor, undefined, (), "NOT IMPLEMENTED: restore the default system cursor")
	END

	INTERFACE(GraphicsManager, )
		METHOD(getNumScreens, number, (), "")
		METHOD(getFPS, number, (), "")
		METHOD(getTargetFPS, number, (), "")
		METHOD(setTargetFPS, GraphicsManager, (number inTargetFPS), "")
		METHOD(getMouse, [object Point], ([number int] mouseNumber = 0), "")
		METHOD(getCurrentScreenMode, object, ([number int] screenNum = PRIMARY_SCREEN), "returns object with width, height, depth and maxWindowRect for specified screen")
		METHOD(getNumSupportedScreenModes, number, ([number int] screen = PRIMARY_SCREEN), "")
		METHOD(getNthSupportedScreenMode, object, ([number int] n, [number int] screenNum = PRIMARY_SCREEN), "returns object with width, height, depth and maxWindowRect for specified screen")
		METHOD(setScreenMode, undefined, ([number int] width, [number int] height, [number int] screenNum = PRIMARY_SCREEN, [number int] bpp = 0), "changes specified screen to closest matching mode")
		METHOD(createWindowPort, [object Port], ([object Rect] rect, string windName = "", [number int] bpp = 0), "create windowed drawing port with given dimensions, title and depth")
		METHOD(createFullScreenPort, [object Port], ([object Rect] rect, [number int] screenNum = PRIMARY_SCREEN, boolean allowResChange = true, [number int] bpp = 0), "create full screen drawing port with given dimensions on given screen, optionally changing depth")
		METHOD(closeGraphicsPort, undefined, ([object Port] port = MAIN_PORT), "close given port, along with its window and restore screen mode if changed")
		METHOD(createFont, [object Font], (string fontName, number scalingFactor = 1.0), "get a font with optional scaling adjust")
		METHOD(getMainPort, [object Port], (), "return the primary graphics port")
		METHOD(switchToFullScreenMode, boolean, (boolean allowResChange = false, [object Port] port = MAIN_PORT), "change a port to fullscreen mode, return true on success")
		METHOD(switchToWindowMode, boolean, ([object Port] port = MAIN_PORT, string windName = ""), "change a port to window mode, return true on success")
		METHOD(inFullScreenMode, boolean, (), "return whether primary graphics port is fullscreen or not")
	END

	INTERFACE(Sound, EXTENDS(INTERFACE_NAME(EventEmitter)) )
		METHOD(getVolume, number, (), "")
		METHOD(setVolume, Sound, (number inVolume), "")
		METHOD(play, undefined, (number vol = 1.0, [number int] offsetX = 0, number pitch = 0, [number uint] fromMs = 0, [number int] lenMs = ENTIRE_LENGTH), "")
		METHOD(start, undefined, (), "")
		METHOD(stop, undefined, (), "")
		METHOD(pause, undefined, (), "")
		METHOD(resume, undefined, (), "")
		METHOD(isPaused, boolean, (), "")
		METHOD(setLooping, Sound, (boolean loopingOn), "")
		METHOD(isLooping, boolean, (), "")
		METHOD(setPitch, Sound, (number pitchOffset), "")
		METHOD(changePitch, undefined, (number targetOffset, [number int] msDuration, [number int] easing = easeInOutQuad), "")
		METHOD(setOffsetX, Sound, ([number int] offsetX), "")
		METHOD(changeOffsetX, undefined, ([number int] targetOffset, [number int] msDuration, [number int] easing = linearTween), "")
		METHOD(fadeOut, undefined, ([number uint] fadeMs, [number int] easing = linearTween), "")
		METHOD(fadeIn, undefined, ([number uint] fadeMs, [number int] easing = linearTween), "")
		METHOD(changeVolume, undefined, (number level, [number uint] fadeMs, [number int] easing = linearTween), "")
		METHOD(skip, Sound, ([number int] skipMilliseconds), "")
		METHOD(skipTo, Sound, ([number uint] timeMs), "")
		METHOD(on, [object IEventHandler], ([number int] eventCode, function func), "")
		METHOD(onDonePlaying, [object IEventHandler], (function func), "")
		METHOD(onLooping, [object IEventHandler], (function func), "")
		METHOD(onFailedToPlay, [object IEventHandler], (function func), "")
	END

	INTERFACE(SoundManager, )
		METHOD(setVolume, undefined, (number level), "0.0 - silent to 1.0 - full volume")
		METHOD(setMute, undefined, (boolean muted), "")
	END

	INTERFACE(Point, EXTENDS(INTERFACE_NAME(Offset)) )
		VARIABLE(x, number)
		VARIABLE(y, number)
		CONSTRUCTOR(Point, undefined, (), "create and set x & y values")
		CONSTRUCTOR(Point, undefined, (number x, number y), "create and set x & y values")
		CONSTRUCTOR(Point, undefined, (number[] xy), "create and set x & y values")
		CONSTRUCTOR(Point, undefined, (object xy), "create and set x & y values")
		METHOD(distance, number, ([object Point] point), "get distance from another point")
		METHOD(projection, [object Point], ([object Point] point), "do a projection of a second point onto this point")
	END

	INTERFACE(Offset, )
		VARIABLE(x, number)
		VARIABLE(y, number)
		METHOD(toString, string, (), "return string representation ")
		CONSTRUCTOR(Offset, undefined, (), "create and set x & y values")
		CONSTRUCTOR(Offset, undefined, (number x, number y), "create and set x & y values")
		CONSTRUCTOR(Offset, undefined, (number[] xy), "create and set x & y values")
		CONSTRUCTOR(Offset, undefined, (object xy), "create and set x & y values")
		METHOD(equals, boolean, ([object Offset] offset), "return true if this point is equal to the other")
		METHOD(notEquals, boolean, ([object Offset] offset), "return true if this point is not equal to the other")
		METHOD(assign, [object Offset], ([object Offset] offset), "set this offset equal to the given offset")
		METHOD(add, [object Offset], ([object Offset] offset), "add an offset to this one")
		METHOD(sub, [object Offset], ([object Offset] offset), "subtract an offset from this one")
		METHOD(mul, [object Offset], ([object Offset] offset), "multiply this offset by the given one")
		METHOD(div, [object Offset], ([object Offset] offset), "divide this offset by the given one")
		METHOD(plus, [object Offset], ([object Offset] offset), "return new offset that is this offset plus given offset")
		METHOD(minus, [object Offset], ([object Offset] offset), "return new offset that is this offset minus given offset")
		METHOD(times, [object Offset], ([object Offset] offset), "return new offset that is this offset multiplied by given offset")
		METHOD(dividedby, [object Offset], ([object Offset] offset), "return new offset that is this offset divided by given offset")
	END

	INTERFACE(Vector, EXTENDS(INTERFACE_NAME(Offset)) )
		VARIABLE(x, number)
		VARIABLE(y, number)
		CONSTRUCTOR(Vector, undefined, (), "create and set x & y values")
		CONSTRUCTOR(Vector, undefined, (number x, number y), "create and set x & y values")
		CONSTRUCTOR(Vector, undefined, (number[] xy), "create and set x & y values")
		CONSTRUCTOR(Vector, undefined, (object xy), "create and set x & y values")
		METHOD(dotProduct, number, ([object Vector] vector), "get dot product for this vector with a 2nd vector")
		METHOD(vectorLength, number, (), "get length as a vector (distance from origin)")
		METHOD(vectorAngle, number, (), "get angle (in radians) for this vector")
	END

	INTERFACE(Rect, )
		VARIABLE(left, number)
		VARIABLE(top, number)
		VARIABLE(right, number)
		VARIABLE(bottom, number)
		METHOD(toString, string, (), "return string representation ")
		CONSTRUCTOR(Rect, undefined, "Exception: Cannot read property 'top' of null", "")
		METHOD(empty, boolean, (), "return true if this rectangle is empty (no width or no height)")
		METHOD(contains, boolean, ([object Rect] r), "contains([Point] p) return true if the point is inside this rectangle; contains([Rect] r) return true if the rectangle passed in is entirely inside this rectangle")
		METHOD(contains, boolean, ([object Point] p), "contains([Point] p) return true if the point is inside this rectangle; contains([Rect] r) return true if the rectangle passed in is entirely inside this rectangle")
		METHOD(overlaps, boolean, ([object Rect] r), "return true if this rectangle overlaps the other rectangle at all (sharing an edge is not overlapping)")
		METHOD(leftTop, [object Point], (), "get top left corner point of this rectangle")
		METHOD(rightTop, [object Point], (), "get top right corner point of this rectangle")
		METHOD(leftBottom, [object Point], (), "get bottom left corner point of this rectangle")
		METHOD(rightBottom, [object Point], (), "get bottom right corner point of this rectangle")
		METHOD(centerPoint, [object Point], (), "get center point of this rectangle")
		METHOD(x1, number, (), "alias for Rect.left")
		METHOD(y1, number, (), "alias for Rect.top")
		METHOD(x2, number, (), "alias for Rect.right")
		METHOD(y2, number, (), "alias for Rect.bottom")
		METHOD(width, number, (), "get the width of this rectangle")
		METHOD(height, number, (), "get the height of this rectangle")
		METHOD(intersection, [object Rect], ([object Rect] r), "get a new rectangle that is the overlapping area of the the rectangles")
		METHOD(unionWith, [object Rect], ([object Rect] r), "get the smallest possible new rectangle that contains both rectangles")
		METHOD(moveLeft, undefined, (number delta), "move the rectangle to the left by some amount")
		METHOD(moveRight, undefined, (number delta), "move the rectangle to the right by some amount")
		METHOD(moveUp, undefined, (number delta), "move the rectangle up by some amount")
		METHOD(moveDown, undefined, (number delta), "move the rectangle down by some amount")
		METHOD(moveXTo, undefined, (number x), "move the rectangle to a particular x location, leaving y unchanged")
		METHOD(moveYTo, undefined, (number y), "move the rectangle to a particular y location, leaving x unchanged")
		METHOD(moveTo, undefined, (number x, number y), "moveTo(x,y): the rectangle to a particular (x, y) location; moveTo([Point] p): move the rectangle to a particular point")
		METHOD(moveTo, undefined, ([object Point] p), "moveTo(x,y): the rectangle to a particular (x, y) location; moveTo([Point] p): move the rectangle to a particular point")
		METHOD(center, undefined, ([object Rect] r), "center([Point] p): move the rectangle to be centered over a particular point; center([Rect] r): move the rectangle to be centered within/relative to another rectangle")
		METHOD(center, undefined, ([object Point] p), "center([Point] p): move the rectangle to be centered over a particular point; center([Rect] r): move the rectangle to be centered within/relative to another rectangle")
		METHOD(setSize, undefined, (number n), "set the size (width & height) of the rectangle")
		METHOD(setWidth, undefined, (number w), "")
		METHOD(setHeight, undefined, (number h), "")
		METHOD(horzShrink, undefined, (number delta), "reduce the width of the rectangle while leaving the center point unchanged")
		METHOD(vertShrink, undefined, (number delta), "reduce the height of the rectangle while leaving the center point unchanged")
		METHOD(horzGrow, undefined, (number delta), "increase the width of the rectangle while leaving the center point unchanged")
		METHOD(vertGrow, undefined, (number delta), "increase the height of the rectangle while leaving the center point unchanged")
		METHOD(shrink, undefined, (number delta), "reduce the height and width of the rectangle while leaving the center point unchanged")
		METHOD(grow, undefined, (number delta), "increase the height and width of the rectangle while leaving the center point unchanged")
		METHOD(horzScale, undefined, (number f), "change the x coordinates of the rectangle by a multiplier")
		METHOD(vertScale, undefined, (number f), "change the y coordinates of the rectangle by a multiplier")
		METHOD(scale, undefined, (number f), "change the coordinates of the rectangle by a multiplier")
		METHOD(round, undefined, (), "round the coordinates to closest whole number")
		METHOD(toQuad, [object Quad], (), "convert rectangle to a Quad")
		METHOD(equals, boolean, ([object Rect] r2), "return true if this rectangle is equal to the given one")
		METHOD(notEquals, boolean, ([object Rect] r2), "return true if this rectangle is not equal to the given one")
		METHOD(assign, [object Rect], ([object Rect] r2), "set this rectangle equal to the given one")
		METHOD(add, [object Rect], ([object Rect] r2), "add([Point] p): offset this rectangle's location by adding x & y coordinates of the point; add([Rect] r): add another rectangle to this one by adding corresponding coordinates")
		METHOD(add, [object Rect], ([object Point] p), "add([Point] p): offset this rectangle's location by adding x & y coordinates of the point; add([Rect] r): add another rectangle to this one by adding corresponding coordinates")
		METHOD(sub, [object Rect], ([object Rect] r2), "sub([Point] p): offset this rectangle's location by subtracting x & y coordinates of the point; sub([Rect] r): add another rectangle to this one by subtracting corresponding coordinates")
		METHOD(sub, [object Rect], ([object Point] p), "sub([Point] p): offset this rectangle's location by subtracting x & y coordinates of the point; sub([Rect] r): add another rectangle to this one by subtracting corresponding coordinates")
		METHOD(mul, [object Rect], ([object Rect] r2), "mul([Point] p): change this rectangle's location by multiplying by x & y coordinates of the point; mul([Rect] r): change this rect by multiplying by corresponding coordinates of another rectangle")
		METHOD(mul, [object Rect], ([object Point] p), "mul([Point] p): change this rectangle's location by multiplying by x & y coordinates of the point; mul([Rect] r): change this rect by multiplying by corresponding coordinates of another rectangle")
		METHOD(div, [object Rect], ([object Rect] r2), "div([Point] p): change this rectangle's location by dividing by x & y coordinates of the point; div([Rect] r): change this rect by dividing by corresponding coordinates of another rectangle")
		METHOD(div, [object Rect], ([object Point] p), "div([Point] p): change this rectangle's location by dividing by x & y coordinates of the point; div([Rect] r): change this rect by dividing by corresponding coordinates of another rectangle")
		METHOD(plus, [object Rect], ([object Rect] r2), "")
		METHOD(plus, [object Rect], ([object Point] p), "")
		METHOD(minus, [object Rect], ([object Rect] r2), "")
		METHOD(minus, [object Rect], ([object Point] p), "")
		METHOD(times, [object Rect], ([object Rect] r2), "")
		METHOD(times, [object Rect], ([object Point] p), "")
		METHOD(dividedby, [object Rect], ([object Rect] r2), "")
		METHOD(dividedby, [object Rect], ([object Point] p), "")
	END

	INTERFACE(Quad, )
		VARIABLE(points, [object Point][])
		METHOD(toString, string, (), "return string representation ")
		CONSTRUCTOR(Quad, [object Quad], (args...), "new Quad(): create an empty quad at 0,0; new Quad([Quad] q): copy from another quad; new Quad([Rect] r): create a quad from a rectangle; new Quad([RotatedRect r]): create a quad from a rotated rectangle; new Quad([Point] p1, [Point] p2, [Point] p3, [Point] p4): create a quad given its corner points; new Quad([Point] p[4]): create a quad given an array of 4 points")
		METHOD(getBounds, [object Rect], (), "return a rectangle that bounds the quad")
		METHOD(centerPoint, [object Point], (), "return the calculated centerpoint of the quad")
		METHOD(equals, boolean, ([object Quad] q2), "return true if this quad is equal to the given one")
		METHOD(notEquals, boolean, ([object Quad] q2), "return true if this quad is not equal to the given one")
		METHOD(contains, boolean, ([object Point] p), "returns true if the point is contained within this quad")
		METHOD(moveLeft, undefined, (number delta), "move the quad to the left by some amount")
		METHOD(moveRight, undefined, (number delta), "move the quad to the right by some amount")
		METHOD(moveUp, undefined, (number delta), "move the quad up by some amount")
		METHOD(moveDown, undefined, (number delta), "move the quad down by some amount")
		METHOD(rotate, undefined, (number rotationRadians, [object Offset] centerPtOffset = Point(0,0)), "rotate(n): rotate the quad by a rotation in radians (around the calculated center point of the quad); rotate(n, [Offset] o): rotate the quad by a rotation in radians around an offset center point")
	END

	INTERFACE(RotatedRect, EXTENDS(INTERFACE_NAME(Rect)) )
		VARIABLE(left, number)
		VARIABLE(top, number)
		VARIABLE(right, number)
		VARIABLE(bottom, number)
		VARIABLE(centerOffset, [object Point])
		CONSTRUCTOR(RotatedRect, [object RotatedRect], ([object Rect] rect = Rect(0,0), number rotationRadians = 0.0, [object Offset] cpOffset = null), "create a new RotatedRect")
		METHOD(setCenterOffset, undefined, ([object Offset] cpOffset), "set an offset for point around which rotation is applied")
		METHOD(setRotation, undefined, (number rotationRadians, [object Offset] cpOffset = null), "set the rotation of this rectangle to a particular amount in radians")
		METHOD(rotate, undefined, (number rotateRadians), "change the rotation of this rectangle by some number of radians")
		METHOD(getQuad, [object Quad], (), "create a Quad by applying the rectangle's rotation around the center point with offset")
	END

	INTERFACE(Color, )
		VARIABLE(red, number)
		VARIABLE(green, number)
		VARIABLE(blue, number)
		VARIABLE(alpha, number)
		METHOD(toString, string, (), "return string representation ")
		CONSTRUCTOR(Color, undefined, (), "create and color and set rgb values")
		CONSTRUCTOR(Color, undefined, (number c), "create and color and set rgb values")
		CONSTRUCTOR(Color, undefined, (string colorstr), "create and color and set rgb values")
		CONSTRUCTOR(Color, undefined, (number r, number g, number b, number alpha = 1), "create and color and set rgb values")
		METHOD(equals, boolean, ([object Color] color), "return true if this color is equal to the other (ignoring alpha)")
		METHOD(notEquals, boolean, ([object Color] color), "return true if this color is not equal to the other (ignoring alpha)")
		METHOD(assign, [object Color], ([object Color] color), "set this color equal to the given color")
		METHOD(convertToGrayscale, undefined, (), "convert this color to a matching shade of grey")
	END

	INTERFACE(NetConnection, )
		VARIABLE(localAddr, string)
		VARIABLE(localPort, number)
		VARIABLE(remoteAddr, string)
		VARIABLE(remotePort, number)
		VARIABLE(hasDgram, boolean)
		METHOD(toString, string, (), "return string representation ")
		CONSTRUCTOR(NetConnection, undefined, (object socket), "create a NetConnection to manage a socket")
		METHOD(close, undefined, (boolean kill), "close the connection")
		METHOD(onClose, [object NetConnection], (function callback), "setup connection close handler")
		METHOD(onMessage, [object NetConnection], (function callback), "setup incoming message handler")
		METHOD(send, undefined, (string message), "send a message via a reliable transport mechanism")
		METHOD(send, undefined, ([object MemBlock] message), "send a message via a reliable transport mechanism")
		METHOD(send, undefined, ([object ISerializable] message), "send a message via a reliable transport mechanism")
		METHOD(send, undefined, (object message), "send a message via a reliable transport mechanism")
		METHOD(sendDgram, undefined, (string message ), "send a message via the fastest transport mechanism")
		METHOD(sendDgram, undefined, ([object MemBlock] message ), "send a message via the fastest transport mechanism")
		METHOD(sendDgram, undefined, ([object ISerializable] message ), "send a message via the fastest transport mechanism")
		METHOD(sendDgram, undefined, (object message ), "send a message via the fastest transport mechanism")
	END

	INTERFACE(NetClient, )
		VARIABLE(connection, boolean)
		METHOD(toString, string, (), "return string representation ")
		CONSTRUCTOR(NetClient, undefined, (object opts = null), "create a network client")
		METHOD(connect, [object NetClient], (object serverInfo, function callback, string clientKey = ''), "connect to a server for your game")
		METHOD(onError, [object NetClient], (function callback), "setup error handler")
	END

	INTERFACE(NetServer, )
		VARIABLE(serverPort, number)
		VARIABLE(serverAddr, string)
		VARIABLE(handshakeTimeout, number)
		VARIABLE(reservationRequired, boolean)
		VARIABLE(allowDatagram, boolean)
		VARIABLE(listening, boolean)
		VARIABLE(connections, undefined[])
		METHOD(toString, string, (), "return string representation ")
		CONSTRUCTOR(NetServer, undefined, (object opts = null), "create a network server")
		METHOD(listen, [object NetServer], (function callback), "open the server for incoming connections")
		METHOD(broadcast, number, (object message, function filter = null), "send a message to all connections, with optional filter")
		METHOD(expectClient, [object NetServer], (string clientKey, string clientIpAddr = '*', [number int] reservationTTL = FOREVER, boolean singleUse = false), "client reservation")
		METHOD(onError, [object NetServer], (function callback), "setup error handler")
		METHOD(shutdown, undefined, (boolean closeExisting = true, boolean kill = false), "close the listener and don't accept new connections")
	END
END_NAMESPACE(pdg)

