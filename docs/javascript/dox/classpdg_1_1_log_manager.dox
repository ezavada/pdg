namespace pdg { /**

\class pdg::LogManager

\brief used for doing logging with variable debug levels 

\pre **API Stability: 3 - Stable**. The API has proven satisfactory, but cleanup in the underlying code may cause minor changes. Backwards-compatibility is guaranteed.

About Log Manager
-----------------

The Log Manager is a singleton object that generates date-time stamped log entries in a file or to stdout or stderr.  The Aries log file format used is compact and very easy to search and filter using Unix command line tools like grep and tail.

Anatomy of a Log Entry:
-----------------------

    131023 09:33:51 1382520831167   I4  @LOGINIT   log initialized 2013/10/23 05:33:51 for pdg
       |     |         |            |      |          |
       |     |         |            |      |          +-- log message
       |     |         |            |      |
       |     |         |            |      +-- category
       |     |         |            | 
       |     |         |            +-- level code
       |     |         |           
       |     |         +-- millisecond time stamp
       |     |      
       |     +-- time
       |
       +-- date


The fields are:

 1. date -- the current date (GMT)
 2. time -- the current time (GMT)
 3. millisecond time stamp -- the number of milliseconds since system startup, as returned by TimerManager.getMilliseconds()
 4. level code -- a code representing the logging level for this entry, useful for filtering or log monitoring tools. This code is one of:
  1. E0, E1, E2, E3 - Error (levels 0..3)
  2. I4, I5, I6, I7 - Inform (levels 4..7)
  3. V8 or V9 - Verbose (levels 8 & 9)
  4. TRACE - level 10
 5. category -- a category of message, very useful for filtering. Generally these reflect areas of functionality that would be monitored or debugged separately, e.g.: "AI", "PATHING", "TURN", etc... (See Note below)
 6. message -- the actual log message content

\note By convention, categories starting with @ are reserved for the messages generated by the LogManager itself. Also, categories FATAL, ERROR, WARN, LOG,INFO, DEBUG, and TRACE are generated by calls to pdg.fatal(), pdg.error(), pdg.warn(), pdg.log(), pdg.info(), pdg.debug() and pdg.trace() calls so using those values as categories is inadvisable.

Usage Examples:
---------------

    PDG terminal v0.9.3
    > pdg.getLogManager().initialize("pdg", pdg.getLogManager().init_StdOut);
    > pdg.getLogManager().setLogLevel(10);
    131023 09:33:51 1382520831167   I4   @LOGINIT    log initialized 2013/10/23 05:33:51 for pdg
    131023 09:33:51 1382520831168   I4   @BLDINFO    Build: [Oct 20 2013 11:55:02] Compiler: [GNU gcc] Target: [x86_64-apple-darwin]
    131023 09:33:51 1382520831177   I4   @LOGLVL     setting log level to [10]
    > pdg.getLogManager().writeLogEntry(1, "AI", "calculated chance of mission success 93%");
    131023 09:34:14 1382520854276   E1   AI          calculated chance of mission success 93%
    > pdg.fatal("test fatal error message");
    131023 09:34:56 1382520896706   E0   FATAL       test fatal error message
    > pdg.error("test error message");
    131023 09:34:56 1382520896706   E1   ERROR       test error message
    > pdg.warn("test warn message");
    131023 09:35:52 1382520952860   E3   WARN        test warn message
    > pdg.log("test log message");
    131023 09:34:40 1382520880899   I4   LOG         test log message
    > pdg.info("test info message");
    131023 09:35:38 1382520938037   I5   INFO        test info message
    > pdg.debug("test debug message");
    131023 09:35:11 1382520911109   I7   DEBUG       test debug message
    > pdg.trace("test trace message");
    131023 09:35:27 1382520927229   V9   TRACE       test trace message

\sa TimerManager.getMilliseconds()
\sa pdg.captureConsole()

\ingroup Managers



**/ }